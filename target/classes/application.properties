# DataSource settings: set here your own configurations for the database 
# connection. In this example we have "netgloo_blog" as database name and 
# "root" as username and password.

#server.port=8081
#spring.datasource.url = jdbc:oracle:thin:@10.246.6.130:1521:nodedemo
######producing#######
#spring.datasource.url = jdbc:oracle:thin:@10.238.119.87:1521:orcl
#########Testing and develope########
#spring.datasource.url = jdbc:oracle:thin:@10.238.119.204:1521:orcl
#spring.datasource.username = user01
#spring.datasource.password = user01

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update)
#spring.jpa.hibernate.ddl-auto = none

# Naming strategy
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

#spring.jpa.properties.hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext

spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# Specify the DBMS
#spring.jpa.database = test
# Show or not log for each sql query
spring.jpa.show-sql = true
# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update
# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
# stripped before adding them to the entity manager)
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect


###################example##########################
spring.datasource.max-idle=10
spring.datasource.max-wait=10000
spring.datasource.min-idle=5
spring.datasource.initial-size=5
spring.datasource.validation-query=SELECT 1
spring.datasource.test-on-borrow=false
spring.datasource.test-while-idle=true
spring.datasource.time-between-eviction-runs-millis=18800
#spring.datasource.jdbc-interceptors=ConnectionState;SlowQueryReport(threshold=0)

# \u8BBE\u7F6EIO\u7EBF\u7A0B\u6570, \u5B83\u4E3B\u8981\u6267\u884C\u975E\u963B\u585E\u7684\u4EFB\u52A1,\u5B83\u4EEC\u4F1A\u8D1F\u8D23\u591A\u4E2A\u8FDE\u63A5, \u9ED8\u8BA4\u8BBE\u7F6E\u6BCF\u4E2ACPU\u6838\u5FC3\u4E00\u4E2A\u7EBF\u7A0B
server.undertow.io-threads=1000
# \u963B\u585E\u4EFB\u52A1\u7EBF\u7A0B\u6C60, \u5F53\u6267\u884C\u7C7B\u4F3Cservlet\u8BF7\u6C42\u963B\u585E\u64CD\u4F5C, undertow\u4F1A\u4ECE\u8FD9\u4E2A\u7EBF\u7A0B\u6C60\u4E2D\u53D6\u5F97\u7EBF\u7A0B,\u5B83\u7684\u503C\u8BBE\u7F6E\u53D6\u51B3\u4E8E\u7CFB\u7EDF\u7684\u8D1F\u8F7D
server.undertow.worker-threads=150
# \u4EE5\u4E0B\u7684\u914D\u7F6E\u4F1A\u5F71\u54CDbuffer,\u8FD9\u4E9Bbuffer\u4F1A\u7528\u4E8E\u670D\u52A1\u5668\u8FDE\u63A5\u7684IO\u64CD\u4F5C,\u6709\u70B9\u7C7B\u4F3Cnetty\u7684\u6C60\u5316\u5185\u5B58\u7BA1\u7406
# \u6BCF\u5757buffer\u7684\u7A7A\u95F4\u5927\u5C0F,\u8D8A\u5C0F\u7684\u7A7A\u95F4\u88AB\u5229\u7528\u8D8A\u5145\u5206
server.undertow.buffer-size=1024
# \u6BCF\u4E2A\u533A\u5206\u914D\u7684buffer\u6570\u91CF , \u6240\u4EE5pool\u7684\u5927\u5C0F\u662Fbuffer-size * buffers-per-region
server.undertow.buffers-per-region=1024
# \u662F\u5426\u5206\u914D\u7684\u76F4\u63A5\u5185\u5B58
server.undertow.direct-buffers=true